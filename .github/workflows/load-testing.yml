name: load-testing
on:
  workflow_dispatch:
    inputs:
      totalTime:
        description: 'The total time of the load test in seconds'
        required: false
        default: '600'
      spawnRate:
        description: 'The spawn rate used when creating users'
        required: false
        default: '500'
      userCount:
        required: false
        description: 'Number of users to emulate'
        default: '70000'
      signalingServer:
        required: false
        description: 'The signaling server hostname to use'
        default: 'signaling-server-dev.rdx-works-main.extratools.works'

jobs:
  locust:
    permissions:
      id-token: write
      contents: read
      pull-requests: read

    runs-on: ubuntu-latest
    steps:
      - uses: RDXWorks-actions/checkout@main
        with:
          fetch-depth: 0

      - name: Install AWS CLI
        uses: RDXWorks-actions/install-aws-cli-action@master
        with:
          version: 2

      - name: Configure AWS credentials
        uses: RDXWorks-actions/configure-aws-credentials@main
        with:
          role-to-assume: arn:aws:iam::308190735829:role/gh-signaling-server-load-testing-runner
          aws-region: eu-west-2

      - name: EKS cluster info
        run: |
          aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER --alias $EKS_CLUSTER
          kubectl config get-contexts
        env:
          AWS_REGION: eu-west-2
          EKS_CLUSTER: rdx-works-main-dev

      - name: Scale up the workers
        run: |
          kubectl scale deploy locust-worker -n load-injector-signaling-server --replicas 30
          kubectl rollout status deployment locust-worker -n load-injector-signaling-server

      - name: Run the load test
        run: |
          # Defautl vaules are defined for the cron schedule.
          # Values from a workflow_dispatch job won't be available on other events.
          SPAWN_RATE=${SPAWN_RATE:-500}
          USER_COUNT=${USER_COUNT:-70000}
          TOTAL_TIME=${TOTAL_TIME:-600}
          SIGNALING_SERVER=${SIGNALING_SERVER:-signaling-server-dev.rdx-works-main.extratools.works}

          set -euo pipefail

          echo "Starting load test on server $SIGNALING_SERVER for $TOTAL_TIME seconds"
          echo "Spawn rate: $SPAWN_RATE"
          echo "User count: $USER_COUNT"

          curl -XPOST -sfL -v -u "$LOCUST_USER:$LOCUST_PASS" https://signaling-lcst.extratools.works/swarm \
            -d "host=wss://$SIGNALING_SERVER" \
            -d "spawn_rate=$SPAWN_RATE" \
            -d "user_count=$USER_COUNT"

          echo "Waiting $TOTAL_TIME seconds for the load test to complete"

          sleep $TOTAL_TIME
        env:
          LOCUST_USER: ${{ secrets.LOCUST_USER }}
          LOCUST_PASS: ${{ secrets.LOCUST_PASS }}
          SPAWN_RATE: ${{ inputs.spawnRate }}
          USER_COUNT: ${{ inputs.userCount }}
          TOTAL_TIME: ${{ inputs.totalTime }}
          SIGNALING_SERVER: ${{ inputs.signalingServer }}

      - name: Run e2e tests
        run: |
          SIGNALING_SERVER=${SIGNALING_SERVER:-signaling-server-dev.rdx-works-main.extratools.works}

          eval `ssh-agent -s`
          ssh-add - <<< '${{ secrets.PRIVATE_SSH_KEY }}'

          git clone -b develop --single-branch git@github.com:radixdlt/connector-extension.git
          cd connector-extension

          cat <<DOC > .env
          VITE_APP_SIGNALING_SERVER_BASE_URL=wss://$SIGNALING_SERVER
          VITE_APP_LOG_LEVEL=debug
          DOC

          cat .env

          npm install

          echo "Running connector-extension e2e tests on $SIGNALING_SERVER"

          unset CI
          npm run test
        env:
          SIGNALING_SERVER: ${{ inputs.signalingServer }}

      - name: Send slack notification
        if: failure()
        run: |
          ./.github/scripts/send-slack-notif.sh \
            -t "The signaling server load testing failed" \
            -l ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} \
            -m "Check the logs for more information" \
            -c "DANGER"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send slack notification
        run: |
          ./.github/scripts/send-slack-notif.sh \
            -t "The signaling server load testing passed" \
            -l ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} \
            -m "Check the logs for more information" \
            -c "SUCCESS"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Scale down the workers
        if: always()
        run: |
          kubectl scale deploy locust-worker -n load-injector-signaling-server --replicas 0
          kubectl rollout restart deploy locust-master -n load-injector-signaling-server
